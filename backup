#!/bin/bash
# author : lordpax
# backup v3.3.5
# Petit script de backup

export TEXTDOMAIN="backup"

encrypt=0
tmp_folders=""
backup_folders=""
backup_dest="."
log=0
logFile=""
version="v3.3.5"
archive_name=""
verbose=0
nbToSave=0
restore=0
gitmode=0
branch="master"

# echo_deb <msg>
function echo_log() {
    ([ -z "$1" ] || [ -z "$logFile" ]) && exit 1
    local date=$(date "+%Y-%m-%d %H:%M:%S")
    echo -e "$date : $1" >> "$logFile"
}

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1
    if [ $log -eq 1 ]; then
        echo_log "ERROR : $1"
    else
        echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
    fi
}

# echo_out <msg>
function echo_out() {
    [ -z "$1" ] && exit 1
    if [ $log -eq 1 ]; then
        echo_log "$1"
    else
        echo -e "$1"
    fi
}

function helpFunc() {
    echo_out $"Usage : $(basename "$0") [option]

Option :
-h or --help              Show help
-v or --version           Show version
-V or --verbose           Verbose mode
-f \"<dir1> [dirN]\"        Source folder
-c <config>               File which contain source folders name
-r <backupDir>            Restore backup from backupDir to outputDir
-g <config> [branch]      Push file into a git repo
-o <outputDir>            Destination folder
-e                        Encrypt with passphrase
-l <logFile>              Log file
-n <name>                 Name of output archive (automatically add .tar.gz)
-s <nbToSave>             Save nbToSave backup and delete other

Example :
$(basename "$0") -f \"dir_1 dir_2 dir_3\" -o dest_folder
$(basename "$0") -c config.txt -o dest_folder
$(basename "$0") -f \"dir_1 dir_2 dir_3\" -o dest_folder -l logfile.log
$(basename "$0") -f \"dir_1 dir_2 dir_3\" -o dest_folder -e
$(basename "$0") -r /path/to/backup/ -o path/to/extract -n name
$(basename "$0") -g config.txt branch_name -o repo_folder

Config file example :
path/to/dir_1
# comment
path/to/dir_3"

    exit 0
}

function verification() {
    date=$(date +%Y-%m-%d)
    # hostname=$(hostname -s)
    hostname=$(hostnamectl hostname)
    out=$( ([ $log -eq 1 ] || [ $verbose -eq 0 ]) && echo /dev/null || echo /dev/stdout)

    if [ -n "$tmp_folders" ]; then
        local nbWord=$(echo "$tmp_folders" | wc -w)
        if [ $nbWord -eq 1 ]; then
            if [ -d "$tmp_folders" ] || [ -f "$tmp_folders" ]; then
                backup_folders="$tmp_folders"
            else
                echo_err $"Source \"$tmp_folders\" folder does not exist"
                exit 1
            fi
        else
            for file in $tmp_folders; do
                if [ -d "$file" ] || [ -f "$file" ]; then
                    backup_folders+=" $file"
                else
                    echo_err $"Source \"$file\" folder does not exist"
                fi
            done
        fi
    else
        echo_err $"Source folder is missing"
        exit 1
    fi

    if [ -n "$backup_dest" ]; then
        if [ ! -d "$backup_dest" ]; then
            echo_err $"Destination \"$backup_dest\" folder does not exist"
            exit 1
        fi
    else
        echo_err $"Destination folder is missing"
        exit 1
    fi

    if [ $log -eq 1 ] && [ -z "$logFile" ]; then
        log=0
        echo_err $"Log file is missing"
        exit 1
    fi
}

# readConfig <config>
function readConfig() {
    [ -z "$1" ] && echo_err $"Parameter needed for readConfig" && exit 1
    [ ! -f "$1" ] && echo_err $"Config file \"$1\" does not exist" && exit 1
    local nbWord=$(wc -w < "$1")

    if [ $nbWord -eq 1 ]; then
        tmp_folders="$1"
    else
        while read -r line; do
            [ "${line:0:1}" != "#" ] && tmp_folders+=" $line"
        done < "$1"
    fi
}

function encryptFile() {
    local name=$([ -n "$archive_name" ] && echo "${archive_name}.${date}.tar.gz" || echo "backup_${hostname}.${date}.tar.gz")

    echo_out $"Encryption of $backup_dest/$name ..."
    if ! aescrypt -e "$backup_dest/$name" &> "$out"; then
        echo_err $"Something wrong with encrytion"
        exit 1
    fi
    echo_out $"Encryption $backup_dest/$name.aes end"

    echo_out $"Wiping of $backup_dest/$name ..."
    if ! shred -zvu "$backup_dest/$name" &> "$out"; then
        echo_err $"Something wrong with wiping"
        exit 1
    fi
}

# decryptFile <encryptedFile>
function decryptFile() {
    [ -z "$1" ] && echo_err $"Encrypted file missing" && exit 1
    local crypted_file=$1

    echo_out $"Decryption of $crypted_file.aes ..."
    if ! aescrypt -d "$crypted_file.aes" &> "$out"; then
        echo_err $"Something wrong with decryption"
        exit 1
    fi
    echo_out $"Decryption $crypted_file.aes end"
}

function compressFile() {
    local name=$([ -n "$archive_name" ] && echo "${archive_name}.${date}.tar.gz" || echo "backup_${hostname}.${date}.tar.gz")

    echo_out $"Compress of :"
    for file in $backup_folders; do
        echo_out "  -> $file"
    done

    echo_out $"Backup $backup_dest/$name in progress ..."
    if ! tar czfv "$backup_dest/$name" $backup_folders &> "$out"; then
        echo_err $"Something wrong with compression of $backup_dest/$name"
        exit 1
    fi

    echo_out $"Backup $backup_dest/$name end"
}

# delete <nbToSave>
# conserve les nbToSave les plus rÃ©centes et supprime les autres
function delete() {
    [ -z "$1" ] && echo_err $"Parameter needed for delete" && exit 1
    local name=$([ -n "$archive_name" ] && echo "$archive_name" || echo "backup_${hostname}")
    local nbFile=$(ls "$backup_dest" | grep -c "$name")
    local nbToDel=$(( nbFile - $1 ))
    local extEnc=$([ $encrypt -eq 1 ] && echo ".aes" || echo "")

    if [ $nbToDel -gt 0 ]; then
        local archive_date=$(\
            ls $backup_dest |\
            grep "$name" |\
            cut -d '.' -f 2 |\
            sort -r |\
            tail -$nbToDel
        )

        echo_out "Deleting $nbToDel old backup : "

        for elem in $archive_date; do
            echo_out "  -> Deleting $backup_dest/${name}.${elem}.tar.gz$extEnc ..."
            rm "$backup_dest/${name}.${elem}.tar.gz$extEnc"
        done
    fi
}

# restoreFile
function restoreFile() {
    local name=$([ -n "$archive_name" ] && echo "$archive_name" || echo "backup_${hostname}")
    local archive_date=$(\
        ls $backup_folders |\
        grep "$name" |\
        cut -d '.' -f 2 |\
        sort -r | \
        head -1
    )
    local archive_ext=$(\
        ls $backup_folders |\
        grep "$name" |\
        cut -d '.' -f 5 |\
        sort -r |\
        head -1
    )
    local fullName="$backup_folders/${name}.${archive_date}.tar.gz"

    [ -z "$archive_date" ] && echo_err $"No backup found" && exit 1
    [ "$archive_ext" == "aes" ] && decryptFile "$fullName"

    echo_out $"Restoration of $fullName to $backup_dest"
    if ! tar xfz $fullName -C "$backup_dest" &> "$out"; then
        echo_err $"Something wrong with restoration of $fullName to $backup_dest"
        exit 1
    fi

    if [ "$archive_ext" == "aes" ]; then
        echo_out $"Wiping of $fullName ..."
        if ! shred -zvu $fullName &> "$out"; then
            echo_err $"Something wrong with wiping"
            exit 1
        fi
    fi
}

function gitPushFile() {
    local repo_dir="$backup_dest"
    local init_pos=$(pwd)
    local file=$(ls -a "$repo_dir" | grep -vE "\.$|\.\.$|.git")

    echo_out $"Moving file :"
    for file in $backup_folders; do
        echo_out "  -> $file"
    done

    cd "$repo_dir"

    if ! git checkout $branch; then
        echo_err $"Something wrong git checkout"
        exit 1
    fi

    cd "$init_pos"

    # if ! rsync -r $backup_folders $repo_dir; then
    if ! cp -rf $backup_folders $repo_dir; then
        echo_err $"Something wrong with copy"
        exit 1
    fi

    echo_out $"File is moved"

    cd "$repo_dir"

    if ! git add $(ls -a | grep -vE "\.$|\.\.$|.git"); then
        echo_err $"Something wrong with git add"
        exit 1
    fi

    if ! git commit -am "maj : backup $date"; then
        echo_err $"Something wrong with git commit"
        exit 1
    fi

    if ! git push origin "$branch"; then
        echo_err $"Something wrong with git push"
        exit 1
    fi

    echo_out $"Backup succesfully pushed"
}

if [ $# -ge 1 ]; then
    for i in $(seq 1 $#); do
        case $1 in
            --help | -h)
                helpFunc;;
            --verbose | -V)
                verbose=1;;
            --version | -v)
                echo_out $version
                exit 0;;
            -f)
                tmp_folders=$2
                shift;;
            -r)
                restore=1
                tmp_folders=$2
                shift;;
            -o)
                backup_dest=$2
                shift;;
            -c)
                readConfig "$2"
                shift;;
            -l)
                log=1
                logFile=$2
                shift;;
            -e)
                encrypt=1;;
            -n)
                archive_name=$2
                shift;;
            -s)
                nbToSave=$2
                shift;;
            -g)
                gitmode=1
                readConfig "$2"
                branch=$3
                shift 2;;
            "")
                ;;
            *)
                echo_err $"Unknown parameter \"$1\""
                exit 1
        esac
        shift
    done
fi

verification
if [ $restore -eq 1 ]; then restoreFile
elif [ $gitmode -eq 1 ]; then gitPushFile
else compressFile
fi
[ $encrypt -eq 1 ] && encryptFile
[ $nbToSave -gt 0 ] && delete "$nbToSave"
